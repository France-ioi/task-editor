{
    "title": "Task",
    "type": "object",
    "description": "This editor allows you to edit the various aspects of a task. All the data in this editor is organized as a JSON object, whose properties represent each task part.",
    "definitions": {
        "simpleFile": {"type": "string",
            "format": "url",
            "options": {
                "upload": true,
                "editor": true
            }},

        "fileDescr": {
            "type": "string",
            "format": "url",
            "options": {
                "upload": true,
                "editor": true
            },
            "generator": [{
                "output": {
                    "copy": "tests/gen/[name][ext]"
                    }
                }, {
                "input": {
                    "object": {
                        "name": {
                            "input": {"value": "[short_name][ext]"},
                            "output": {"replace": true}
                        },
                        "path": {
                            "input": {"value": "$TASK_PATH/tests/gen/[name][ext]"},
                            "output": {"replace": true}
                        }}
                    },
                "output": {
                    "replace": true
                    }
                }],
            "required": ["name"]},

        "compilationDescr": {"type": "object",
            "description": "Description of the files required to compile a program.",
            "properties": {
                "language": {"type": "string", "description": "Language of the program. Possible values: 'c', 'cpp', 'cpp11', 'ml', 'ocaml', 'java', 'javascool', 'js', 'sh', 'shell', 'pascal', 'php'', 'py', 'py2', 'py3', 'python', 'python2', 'python3'."},
                "files": {"type": "array", "description": "List of source files.", "items": {"$ref": "#/definitions/fileDescr"}},
                "dependencies": {"type": "array", "description": "List of dependencies.", "items": {"$ref": "#/definitions/fileDescr"}}},
            "required": ["language", "files", "dependencies"]},

        "executionParams": {"type": "object",
            "description": "Parameters of an execution.",
            "properties": {
                "timeLimitMs": {"type": "integer", "description": "Time limit in milliseconds."},
                "memoryLimitKb": {"type": "integer", "description": "Memory limit in kilobytes."},
                "useCache": {"type": "boolean", "description": "Use taskgrader's cached items."},
                "executionArgs": {"type": "string", "description": "Command-line arguments for the execution of the program."},
                "forceStatic": {"type": "boolean", "description": "If present, force static or non-static compilation."},
                "continueOnError": {"type": "boolean", "description": "Consider errors as non-fatal."},
                "stdoutTruncateKb": {"type": "integer", "description": "Size in kilobytes to capture from stdout, -1 means no limit."},
                "stderrTruncateKb": {"type": "integer", "description": "Size in kilobytes to capture from stderr, -1 means no limit."},
                "addFiles": {"type": "array", "description": "Files to add to the execution folder.", "items": {"$ref": "#/definitions/fileDescr"}},
                "getFiles": {"type": "array", "description": "Files to capture in the report.", "items": {"$ref": "#/definitions/filename"}}},
            "required": ["timeLimitMs", "memoryLimitKb", "useCache", "stdoutTruncateKb", "stderrTruncateKb", "getFiles"]},

        "compileAndRunParams": {"type": "object",
            "description": "Parameters for a compilation and an execution.",
            "properties": {
                "compilationDescr": {"$ref": "#/definitions/compilationDescr"},
                "compilationExecution": {"$ref": "#/definitions/executionParams"},
                "runExecution": {"$ref": "#/definitions/executionParams"}},
            "required": ["compilationDescr", "compilationExecution", "runExecution"]},

        "filename": {"type": "string",
            "description": "A valid file name.",
            "pattern": "^\\w[\\w.~/-]+$"}
    },

    "properties": {
      "files": {
        "type": "array",
        "format": "tabs",
        "title": "Files",
        "description": "Extra files to place in the task folder.",
        "uniqueItems": true,
        "items": {
          "type": "object",
          "title": "File",
          "properties": {
              "path": {
                 "type": "string",
                 "title": "Path"
               },
               "type": {
                 "type": "string",
                 "title": "Type",
                 "enum": ["image", "testCase", "solution"]
               },
               "description": {
                 "type": "string",
                 "title": "Description"
               },
               "usedInStatement": {
                 "type": "boolean",
              "format": "checkbox",
                 "title": "Used in statement"
               },
               "usedInSolution": {
                 "type": "boolean",
                 "format": "checkbox",
                 "title": "Used in solution"
               },
               "usedInHints": {
                 "type": "boolean",
                 "format": "checkbox",
                 "title": "Used in hints"
               }
           },
           "required": ["path", "type", "description", "usedInStatement", "usedInSolution", "usedInHints"]
        }
      },
      "PEMTaskMetaData": {
         "type": "object",
         "description": "Task meta-data.",
         "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the task; we generally use the path in the SVN.",
              "title": "id",
              "minLength": "5"
            },
            "license": {
              "type": "string",
              "enum": ["CC-BY-SA", "CC-BY-NC"]
            },
            "authors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "language": {
              "type": "string",
              "description": "Language for the task. If you want to have this task in multiple languages, copy the \"index.html\" file generated by this editor to another file \"index_en.html\" (for instance), and edit it manually.",
              "enum": ["fr", "en", "de"]
            },
            "version": {
              "type": "string",
              "title": "version"
            },
            "baseUrl": {
              "type": "string",
              "title": "baseUrl"
            },
            "supportedLanguages": {
               "type": "array",
               "format": "table",
               "description": "Languages supported by the task. Use \"*\" to enable all languages.",
               "items": {
                  "type": "string",
                  "title": "supportedLanguage",
                  "enum": ["*", "c", "cpp", "java", "py", "text"]
               }
            },
            "hasUserTests": {
               "type": "boolean",
               "description": "Allow the user to test their solution against their own tests. If \"true\", the user will be presented with a test editor under the code editor, allowing them to write themselves the input which will be given to their program, and the expected output.",
               "title": "User can use their own tests"
            },
            "limits": {
              "type": "array",
              "description": "Execution limits (time and memory) for this task, for each language.",
              "format": "table",
              "title": "Limits",
              "items": {
                  "type": "object",
                  "options": {
                    "layout": "grid"
                  },
                  "properties": {
                    "language": {
                       "title": "Language",
                       "type": "string",
                       "enum": ["*", "cpp", "c", "java", "py"],
                       "options": {
                        "grid_columns": 6
                       }
                    },
                    "time": {
                       "title": "Time (ms)",
                       "type": "string",
                       "options": {
                        "grid_columns": 3
                       }
                    },
                    "memory": {
                       "title": "Memory (KB)",
                       "type": "string",
                       "options": {
                        "grid_columns": 3
                       }
                    }
                 },
                 "required": ["language", "time", "memory"]
              }
            }
         },
         "required": ["id", "authors", "language"],
         "generator": [{
            "output": {
                "inject": {
                    "template": "index.html",
                    "selector": "$PEMTaskMetaData"
                }}
            }]
      },
      "FIOITaskMetaData": {
         "type": "object",
         "description": "Meta-data specific to taskgrader/taskplatform tasks.",
         "properties": {
            "taskSources": {
               "type": "object",
               "description": "Source files available in the task.",
               "properties": {
                    "defaultSource": {
                        "type": "array",
                        "description": "Source files which will populate the editor for each language, when the user first loads a task or opens a new tab with that language.",
                        "items": {
                            "type": "string",
                            "format": "url",
                            "options": {
                                "upload": true,
                                "editor": true
                            },
                            "description": "Checker program. The language of the checker will be automatically determined from its file extension.",
                            "generator": [{
                                "output": {
                                    "copy": "sources/[name][ext]"
                                    }
                                }, {
                                "input": {
                                    "keepArray": true,
                                    "value": "[name][ext]"
                                    },
                                "output": {
                                    "replace": true
                                    }
                                }]
                        }
                    }
               }
            }
         },
         "required": [],
         "generator": [{
            "input": {
                "step": 2
            },
            "output": {
                "inject": {
                    "template": "index.html",
                    "selector": "$FIOITaskMetaData"
                }}
            }]
      },
      "title": {
        "type": "string",
        "description": "Title of the task.",
        "title": "Title",
        "generator": [{
            "output": {
                "inject": {
                    "template": "index.html",
                    "selector": "title"
                }}
            }]
      },
      "task": {
         "title": "Task statement",
         "description": "Task statement, displayed to the user.",
         "type": "string",
         "format": "html",
         "options": {
           "wysiwyg": true
         },
         "generator": [{
            "output": {
                "inject": {
                    "template": "index.html",
                    "selector": "#task"
                }}
            }]
      },
      "solution": {
         "title": "Solution",
         "description": "Task solution, displayed to the user when they complete the task.",
         "type": "string",
         "format": "html",
         "options": {
           "wysiwyg": true
         },
         "generator": [{
            "output": {
                "inject": {
                    "template": "index.html",
                    "selector": "#solution"
                }}
            }]
      },
      "hints": {
        "type": "array",
        "description": "Hints the user can request automatically; each request will give one new hint.",
        "format": "tabs",
        "title": "Hints",
        "items": {
          "title": "Hint",
          "type": "string",
          "format": "html",
          "options": {
            "wysiwyg": true
          }
        },
        "generator": [{
            "input": {
                "keepArray": true
            },
            "output": {
                "inject": {
                    "template": "index.html",
                    "selector": ".hint"
                }}
            }]
      },
      "testFiles": {
        "title": "Test files",
        "description": "Tests, consisting in an input and an optional expected output, the solution will be tested against. A basic task may only consist in input and expected output files.",
        "type": "array",
        "items": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string",
                    "description": "Input file",
                    "format": "url",
                    "options": {
                        "editor": true,
                        "upload": true
                    },
                    "generator": [{
                            "output": {
                                "copy": "tests/files/test[index].in"
                            }
                        }]
                    },
                "output": {
                    "type": "string",
                    "description": "Output file (optional)",
                    "format": "url",
                    "options": {
                        "editor": true,
                        "upload": true
                        },
                    "generator": [{
                        "output": {
                            "copy": "tests/files/test[index].out"
                        }
                        }]
                    }
            },
            "required": ["input"]
        }
      },
      "taskSettings": {
        "title": "taskSettings.json",
        "description": "Optional taskSettings.json file for the task. Please refer to the documentation at <a href=\"https://france-ioi.github.io/taskgrader/tasksettings/\" target=\"_blank\">here</a>.",
        "type": "object",
        "generator": [{
            "input": {
                "step": 2
            },
            "output": {
                "inject": {
                    "template": "taskSettings.json",
                    "translate": false,
                    "selector": ""
                }}
            }],
        "properties": {
            "generator": {"type": "string",
                "description": "Path to the generator, relative to the task folder."},
            "sanitizer": {"type": "string",
                "description": "Path to the sanitizer, relative to the task folder."},
            "checker": {
                "type": "string",
                "format": "url",
                "options": {
                    "upload": true,
                    "editor": true
                },
                "description": "Checker program. The language of the checker will be automatically determined from its file extension.",
                "generator": [{
                    "output": {
                        "copy": "tests/gen/checker[ext]"
                        }
                    }, {
                    "input": {"value": "tests/gen/checker[ext]"},
                    "output": {"replace": true}
                    }]
                },

            "sanitizerLang": {"type": "string",
                "description": "Language of the sanitizer."},
            "checkerLang": {"type": "string",
                "description": "Language of the checker."},

            "generatorDeps": {"type": "array",
                "description": "List of dependencies for the generator.",
                "items": {"$ref": "#/definitions/fileDescr"}},
            "sanitizerDeps": {"type": "array",
                "description": "List of dependencies for the sanitizer.",
                "items": {"$ref": "#/definitions/fileDescr"}},
            "checkerDeps": {"type": "array",
                "description": "List of dependencies for the checker.",
                "items": {"$ref": "#/definitions/fileDescr"}},

            "extraDir": {"type": "string",
                "description": "Path to scan for \"extraFiles\", such as test files or libraries which aren't generated. Default is \"tests/files/\"."},

            "ignoreTests": {"type": "array",
                "description": "List of glob-style filenames to ignore while scanning for test cases. These test cases will be ignored by genJson, and thus not used for evaluation.",
                "items": {"type": "string", "description": "Glob-style filename to ignore."}},

            "correctSolutions": {"type": "array",
                "description": "List of \"correct solutions\", which are solutions which will be automatically evaluated against the task and checked for consistency against an expected grade.",
                "items": {"type": "object",
                    "description": "A correct solution.",
                    "properties": {
                        "path": {"type": "string", "description": "Full path to the solution."},
                        "language": {"type": "string", "description": "Language of the solution."},
                        "grade": {"oneOf": [{"type": "integer"}, {"type": "array", "items": {"type": "integer"}}], "description": "Expected average grade or list of grades."},
                        "nbtests": {"type": "integer", "description": "Number of test cases this solution is expected to be evaluated against."}
                        },
                    "required": ["path"]}},

            "overrideParams": {"type": "object",
                "description": "Paramters to override in the generated \"defaultParams.json\" file. The keys of this object will be copied as-is to the file."},

            "defaultEvaluationGenerators": {"type": "array",
                "description": "List of generators to compile. Will override automatic detection. Recommended only for advanced users.",
                "items": {"type": "object",
                    "description": "Generator, generates tests and libraries to be used for evaluation.",
                    "properties": {
                        "id": {"type": "string", "description": "Name of the generator."},
                        "compilationDescr": {"$ref": "#/definitions/compilationDescr"},
                        "compilationExecution": {"$ref": "#/definitions/executionParams"}},
                    "required": ["id", "compilationDescr", "compilationExecution"]}},

            "defaultEvaluationGenerations": {"type": "array",
                "description": "List of generations (executions of generators). Will override automatic detection. Recommended only for advanced users.",
                "items": {"type": "object",
                    "description": "Generation (execution of a generator).",
                    "properties": {
                        "id": {"type": "string", "description": "Name of the generation."},
                        "idGenerator": {"type": "string", "description": "Name of the tests and libraries generator."},
                        "idOutputGenerator": {"type": "string", "description": "Name of the results generator, if applicable."},
                        "genExecution": {"$ref": "#/definitions/executionParams"},
                        "outGenExecution": {"$ref": "#/definitions/executionParams"},
                        "testCases": {"type": "array", "description": "List of specific test cases to generate.",
                            "items": {"type": "object", "properties": {
                                "name": {"$ref": "#/definitions/filename", "description": "Filename of the test to generate."},
                                "params": {"type": "string", "description": "Command-line arguments for the generator."}},
                                "required": ["name", "params"]}}},
                    "required": ["id", "idGenerator", "genExecution"]}},

            "defaultEvaluationExtraTests": {"type": "array",
                "description": "List of specific test files to import.",
                "items": {"$ref": "#/definitions/fileDescr"}},

            "defaultEvaluationSanitizer": {"description": "Sanitizer, tests whether an input file is a valid test. Will override automatic detection. Recommended only for advanced users.",
                "$ref": "#/definitions/compileAndRunParams"},

            "defaultEvaluationChecker": {"description": "Checker, grades the solution's result. Will override automatic detection. Recommended only for advanced users.",
                "$ref": "#/definitions/compileAndRunParams"},

            "defaultEvaluationSolutions": {"type": "array",
                "description": "List of solutions to grade. Will override automatic detection. Recommended only for advanced users.",
                "items": {"type": "object",
                    "description": "Solution to be graded.",
                    "properties": {
                        "id": {"type": "string", "description": "Name of the solution."},
                        "compilationDescr": {"$ref": "#/definitions/compilationDescr"},
                        "compilationExecution": {"$ref": "#/definitions/executionParams"}},
                    "required": ["id", "compilationDescr", "compilationExecution"]}},

            "defaultEvaluationExecutions": {"type": "array",
                "description": "List of solution executions. Will override automatic detection. Recommended only for advanced users.",
                "items": {"type": "object",
                    "description": "Execution of a solution on one or multiple tests.",
                    "properties": {
                        "id": {"type": "string", "description": "Name of the execution."},
                        "idSolution": {"type": "string", "description": "Name of the solution to grade."},
                        "filterTests": {
                            "type": "array",
                            "description": "List of globs filtering tests to input to the solution.",
                            "items": {
                                "type": "string",
                                "pattern": "^[^/]+$"}},
                        "noFeedbackTests": {
                            "type": "array",
                            "description": "List of globs filtering tests (selected with filterTests) whose outputs will be hidden.",
                            "items": {
                                "type": "string",
                                "pattern": "^[^/]+$"}},
                        "runExecution": {"$ref": "#/definitions/executionParams"}},
                    "required": ["id", "idSolution", "filterTests", "runExecution"]}}}

            }
    },

    "required": ["PEMTaskMetaData", "FIOITaskMetaData", "title", "task", "solution", "testFiles"],
    "translate": ["PEMTaskMetaData", "FIOITaskMetaData", "title", "task", "solution", "testFiles"],
    "advanced": ["taskSettings"],
    "languages": {
      "list": {
        "en": "English",
        "fr": "French",
        "de": "Dutch",
        "fa": "فارسی"
      },
      "rtl": ["fa"],
      "original": "en"
    }
}
